#!/usr/bin/python3
#+
# This script compiles a database of all installed fonts that offer
# OpenType font features, together with what features they support.
# The various font directories listed in the default Fontconfig
# configuration are scanned, and an SQLite database called ot_fonts.db
# is created in the current directory and filled in with details of
# all font features found for all OpenType-supporting fonts.
#
# Unfortunately, Fontconfig itself does not provide any info on OpenType
# font features, so this has to be obtained from HarfBuzz. Therefore,
# this script needs HarfPy, my Python wrapper for HarfBuzz.
#
# This database can be used to do some useful queries on your installed fonts.
# For example, tally up which font features are supported by installed fonts,
# and how many there are for each feature:
#
#     select tag, count(*) from font_features group by tag;
#
# A variation of the above: order the listing by number of fonts supporting
# each feature, to see which are the most popular:
#
#     select tag, count(*) as nr_fonts from font_features
#         group by tag order by nr_fonts desc;
#
# Or, which fonts support a given font feature (in this case, “hlig”,
# historical ligatures):
#
#     select family, style, fonts.filename as filename from fonts
#         natural join font_features where tag = "hlig";
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import time
import getopt
import apsw as sqlite
import freetype2 as freetype
from freetype2 import \
    FT
import fontconfig as fc
from fontconfig import \
    FC
import harfbuzz as hb
from harfbuzz import \
    HARFBUZZ as HB

dbname = "ot_fonts.db"
if os.path.exists(dbname) :
    raise RuntimeError("database file “%s” already exists" % dbname)
#end if
start = time.time()
db = sqlite.Connection \
  (
    dbname,
    flags = sqlite.SQLITE_OPEN_READWRITE | sqlite.SQLITE_OPEN_CREATE
  )
cu = db.cursor()
for table_name, fields in \
    (
        ("fonts",
            (
                "family varchar not null",
                "style varchar not null",
                "filename varchar not null",
                "fileindex integer not null",
                "primary key (filename, fileindex)",
            ),
        ),
        ("font_features",
            (
                "filename varchar not null",
                "fileindex integer not null",
                "tag varchar not null",
                "primary key (filename, fileindex, tag)",
            ),
        ),
    ) \
:
    cu.execute \
      (
            "create table %s\n"
            "  (\n"
            "%s"
            "  )\n"
        %
            (
                table_name,
                "".join("    %s,\n" % field for field in fields)[:-2] + "\n",
            )
      )
#end for
cu.execute \
  (
    "create index tag on font_features(tag)"
  )

conf = fc.Config.get_current()
pat = fc.Pattern.create()
conf.substitute(pat, FC.MatchPattern)
pat.default_substitute()

nr_fonts = 0
total_fonts = 0
nr_features = 0
cu.execute("begin transaction")
  # batching multiple insertions into a single transaction really speeds things up
for font_dir in conf.font_dirs :
    for dirpath, dirnames, filenames in os.walk(font_dir) :
        for filename in filenames :
             if filename.endswith((".otf", ".ttf", ".ttc")) :
                # nothing found in .pfb so far, so I’ve left it out
                # .woff also works, but seem to be duplicates
                # there is a .woff2, but FreeType can’t handle it (yet?)
                fontfilename = os.path.join(dirpath, filename)
                faceindex = 0
                while True :
                    try :
                        ft_face = freetype.Face.new(fontfilename, faceindex)
                    except freetype.FTException as fail :
                        if fail.code != freetype.Error.Invalid_Argument :
                            sys.stderr.write("error opening %s[%d] -- %s\n" % (fontfilename, faceindex, fail.args[0]))
                        #end if
                        ft_face = None
                    #end try
                    if ft_face == None :
                        break
                    total_fonts += 1
                    try :
                        ft_face.load_sfnt_table("GDEF", 0, 0) # just check for table presence
                        has_layout = True
                    except freetype.FTException as fail :
                        if fail.code != freetype.Error.Table_Missing :
                            raise
                        #end if
                        has_layout = False
                    #end try
                    sys.stdout.write \
                      (
                            "%d: %s[%d]: %s layout\n"
                        %
                            (total_fonts, fontfilename, faceindex, ("no", "has")[has_layout])
                      ) # debug
                    if has_layout :
                        hb_face = hb.Face.ft_create(ft_face)
                        feature_tags = set()
                        for table_tag in (HB.OT_TAG_GSUB, HB.OT_TAG_GPOS) :
                            # GSUB for substitution features, GPOS for positioning features
                            # (e.g. kerning)
                            feature_tags |= set(hb_face.ot_layout_table_get_feature_tags(table_tag))
                        #end for
                        if len(feature_tags) != 0 :
                            sys.stdout.write \
                              (
                                    "%s %s -- %s[%d] -- %s\n"
                                %
                                    (
                                        ft_face.family_name,
                                        ft_face.style_name,
                                        fontfilename,
                                        faceindex,
                                        ", ".join(HB.UNTAG(t, True).decode() for t in sorted(feature_tags))
                                    )
                              ) # debug
                            try :
                                cu.execute \
                                  (
                                    "insert into fonts(family, style, filename, fileindex) values(?, ?, ?, ?)",
                                    (
                                        ft_face.family_name,
                                        ft_face.style_name,
                                        fontfilename,
                                        faceindex,
                                    )
                                  )
                            except sqlite.ConstraintError :
                                sys.stdout.write("duplicate entry for %s[%d]\n" % (fontfilename, faceindex))
                            else :
                                nr_fonts += 1
                                nr_features += len(feature_tags)
                                cu.execute \
                                  (
                                        "insert into font_features(filename, fileindex, tag) values "
                                    +
                                        ", ".join(("(?, ?, ?)",) * len(feature_tags)),
                                    sum
                                      (
                                        (
                                            (
                                                fontfilename,
                                                faceindex,
                                                HB.UNTAG(tag, True).decode(),
                                            )
                                            for tag in feature_tags
                                        ),
                                        ()
                                      )
                                  )
                            #end try
                        else :
                            sys.stdout.write \
                              (
                                    "%s %s -- %s[%d] -- nothing\n"
                                %
                                    (
                                        ft_face.family_name,
                                        ft_face.style_name,
                                        fontfilename,
                                        faceindex
                                    )
                              ) # debug
                        #end if
                    #end if
                    faceindex += 1
                #end while
            #end if
        #end for
    #end for
#end for
cu.execute("end transaction")
cu.close()
elapsed = time.time() - start
sys.stdout.write \
  (
    "fonts %d/%d, features %d, time %.2fs\n" % (nr_fonts, total_fonts, nr_features, elapsed)
  )
